let numStars = 150;
let stars = [];
let shootingStars = []; // Array to store shooting stars
let waveOffsetX = 0;
let waveOffsetY = 0;
let attractionThreshold = 100;  // Distance from mouse for attraction

function setup() {
    let canvas = createCanvas(windowWidth, windowHeight);
    canvas.parent("particle-bg"); // Attach the canvas to a div with the ID "particle-bg"
    noStroke();

    // Initialize stars with random properties
    for (let i = 0; i < numStars; i++) {
        stars.push({
            x: random(width),
            y: random(height),
            originalX: random(width),
            originalY: random(height),
            size: random(1, 3),
            speed: random(0.5, 1.5),
            opacity: 0,
            blinkSpeed: random(0.5, 1.5),
            moveBackSpeed: 0.05
        });
    }

    // Start fading in stars
    setTimeout(() => {
        for (let s of stars) {
            s.opacity = 255;
        }
    }, 2500);

    // Schedule the first shooting star
    scheduleShootingStar();
}

function draw() {
    clear(); // Clear the canvas for each frame

    // Draw stars
    for (let s of stars) {
        if (s.opacity < 255) {
            s.opacity += 255 / 60;
        }

        let distToMouse = dist(mouseX, mouseY, s.x, s.y);
        if (distToMouse < attractionThreshold) {
            let angle = atan2(mouseY - s.y, mouseX - s.x);
            let force = map(distToMouse, 0, attractionThreshold, 0.5, 0);
            s.x += cos(angle) * force * 2;
            s.y += sin(angle) * force * 2;
        } else {
            s.x += (s.originalX - s.x) * s.moveBackSpeed;
            s.y += (s.originalY - s.y) * s.moveBackSpeed;
        }

        fill(255, 255, 255, s.opacity);
        ellipse(s.x, s.y, s.size, s.size);

        s.x += random(-0.1, 0.01) * s.speed;

        if (s.x > width) s.x = 0;
        if (s.x < 0) s.x = width;
        if (s.y > height) s.y = 0;
        if (s.y < 0) s.y = height;
    }

    // // Draw shooting stars
    // for (let i = shootingStars.length - 1; i >= 0; i--) {
    //     let ss = shootingStars[i];
    //     ss.curveOffset += 0.1; // Increment curve offset for sinusoidal motion
    //     ss.y += sin(ss.curveOffset) * ss.curveAmplitude; // Apply curve

    //     // Draw with a tail effect
    //     for (let j = 0; j < 5; j++) {
    //         let alpha = map(j, 0, 4, 255, 0); // Gradual fade for the tail
    //         fill(255, 255, 255, alpha);
    //         ellipse(ss.x + j * 5, ss.y + j * 2, ss.size, ss.size / 2);
    //     }

    //     // Move the shooting star
    //     ss.x += cos(ss.angle) * ss.speed;
    //     ss.y += sin(ss.angle) * ss.speed;

    //     // Remove when off-screen
    //     if (ss.x < -50 || ss.y < -50 || ss.y > height + 50) {
    //         shootingStars.splice(i, 1);
    //     }
    // }
}

// Schedule shooting stars at random intervals (at least 4 seconds apart)
function scheduleShootingStar() {
    setTimeout(() => {
        let startX = random([width, width]); // Start from right-side vertices
        let startY = random([0, height]); // Only spawn at top-right or bottom-right vertices
        let endX = random([0, 0]); // Land at left-side vertices
        let endY = random([0, height]); // Only land at top-left or bottom-left vertices
        let angle = atan2(endY - startY, endX - startX);

        shootingStars.push({
            x: startX,
            y: startY,
            size: random(2, 5),
            speed: random(5, 10),
            angle: angle,
            curveOffset: 0, // Start curve offset
            curveAmplitude: random(1, 1.01) // Random curve amplitude
        });

        // Schedule the next shooting star randomly (between 4 to 12 sec)
        scheduleShootingStar();
    }, random(12000, 20000));
}

function windowResized() {
    let prevWidth = width;
    let prevHeight = height;
    resizeCanvas(windowWidth, windowHeight);

    for (let s of stars) {
        s.x = (s.x / prevWidth) * width;
        s.y = (s.y / prevHeight) * height;
        s.originalX = (s.originalX / prevWidth) * width;
        s.originalY = (s.originalY / prevHeight) * height;
    }
}